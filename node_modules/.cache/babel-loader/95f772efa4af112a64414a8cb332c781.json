{"ast":null,"code":"var _jsxFileName = \"/www/code/blood-orange-quiz/src/Pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { useHistory } from 'react-router';\nimport QuizOrangeBg from './../Assets/orange-vape-bg.png';\nimport QuizGreenBg from './../Assets/green-quiz-bg.png';\n/**\n* @author\n* @function Quiz\n**/\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not.\n// we're nor going to call and random search function on the old array for another question.\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  var completed = [];\n  var points = 0;\n  var counter = 0;\n  var bg_counter = 0;\n  const question = useRef();\n  const a = useRef();\n  const b = useRef();\n  const c = useRef();\n  const d = useRef();\n  const bg = useRef();\n  const questionaire_limit = 5;\n  const list_of_questions = [{\n    question: '1. Saturday 1G Blood Orange',\n    options: {\n      a: 'Is a Hybrid Offering',\n      b: 'Is an Indica',\n      c: 'Is a Sativa',\n      d: 'All the above'\n    },\n    answer: 'c'\n  }, {\n    question: '2. Saturday Blood Orange is priced perfectly for which on-the-go shopper?',\n    options: {\n      a: 'Price Sensitive',\n      b: 'High End',\n      c: 'Mainstream',\n      d: 'All the above'\n    },\n    answer: 'a'\n  }, {\n    question: \"3. When speaking about the 1G Blood Orange product, I'd start with:\",\n    options: {\n      a: 'The Brand',\n      b: 'The Value',\n      c: 'The Potency',\n      d: 'The Flavour'\n    },\n    answer: 'd'\n  }, {\n    question: \"4. Orange flavour can be difficult to nail, but Saturday's Blood Orange has done so beautifully because:\",\n    options: {\n      a: \"It's crafted with terpenes and other aromatic compounds native to both oranges and cannabis\",\n      b: \"It's all limonene, which is the only citrus aromatic you need\",\n      c: \"We hired the Keebler elves.\",\n      d: 'All the above'\n    },\n    answer: 'b'\n  }, {\n    question: '5. I’d Recommend Saturday Blood Orange to a shopper in a situation where:',\n    options: {\n      a: 'An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.',\n      b: 'A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.',\n      c: 'An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank',\n      d: 'An occasional smoker who is looking for edibles.'\n    },\n    answer: 'c'\n  }];\n  const history = useHistory();\n  var set_forth_div = ['false'];\n  useEffect(() => {\n    randList();\n  }, []);\n\n  const randList = () => {\n    gsap.to('.green_bg', {\n      backgroundColor: '#535938',\n      duration: 0\n    });\n\n    if (completed.length >= questionaire_limit) {\n      if (points < 4) {\n        localStorage.setItem('points', points);\n        history.push('/points'); // window.location.reload()\n      } else {\n        localStorage.setItem('points', points);\n        history.push('/data-capture');\n      }\n    } else {\n      // Math.round(Math.random() * 4)\n      let random = counter++;\n      const check_completed = completed.find(element => element == random); // For some reason zero is being ignored. That why it's in the conditional statement below.\n\n      if (check_completed || check_completed === 0) {\n        randList();\n      } else {\n        completed.push(random);\n        question.current.textContent = list_of_questions[random].question;\n        bg.current.style.background = `url(${QuizOrangeBg})`;\n        bg.current.style.backgroundSize = 'cover';\n        a.current.textContent = list_of_questions[random].options.a;\n        b.current.textContent = list_of_questions[random].options.b;\n        c.current.textContent = list_of_questions[random].options.c;\n        d.current.textContent = list_of_questions[random].options.d;\n      }\n    }\n  };\n\n  const selected_answer = selected_data => {\n    gsap.to(`.${selected_data}`, {\n      backgroundColor: '#40473F',\n      duration: 0.5\n    });\n    let index = completed[completed.length - 1];\n    let answer = list_of_questions[index].answer;\n\n    if (selected_data === answer) {\n      answer.current.textContent = 'Correct';\n      points++;\n      console.log(`updated points: ${points}`);\n    } else {\n      eval(selected_data).current.textContent = 'Incorrect';\n    }\n\n    setTimeout(() => {\n      randList();\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'Prizing',\n    ref: bg,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          ref: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"answer_list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"green_bg a\",\n          onClick: () => selected_answer('a'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: a\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 86\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"green_bg b\",\n          onClick: () => selected_answer('b'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: b\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 86\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"green_bg c\",\n          onClick: () => selected_answer('c'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 86\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: set_forth_div == 'true' ? 'displayNone' : 'green_bg d',\n          onClick: () => selected_answer('d'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: d\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 153,\n            columnNumber: 126\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 144,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"KvaWXTNKmbBSOVibstziA6MdziI=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/www/code/blood-orange-quiz/src/Pages/Quiz.js"],"names":["React","useEffect","useRef","useState","gsap","useHistory","QuizOrangeBg","QuizGreenBg","Quiz","props","completed","points","counter","bg_counter","question","a","b","c","d","bg","questionaire_limit","list_of_questions","options","answer","history","set_forth_div","randList","to","backgroundColor","duration","length","localStorage","setItem","push","random","check_completed","find","element","current","textContent","style","background","backgroundSize","selected_answer","selected_data","index","console","log","eval","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { gsap } from 'gsap'\nimport { useHistory } from 'react-router'\nimport QuizOrangeBg from './../Assets/orange-vape-bg.png'\nimport QuizGreenBg from './../Assets/green-quiz-bg.png'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not.\n// we're nor going to call and random search function on the old array for another question.\n\nconst Quiz = (props) => {\n    var completed = []\n    var points = 0\n    var counter = 0\n    var bg_counter = 0\n    const question = useRef()\n    const a = useRef()\n    const b = useRef()\n    const c = useRef()\n    const d = useRef()\n    const bg = useRef()\n    const questionaire_limit = 5\n    const list_of_questions = [\n      {\n        question: '1. Saturday 1G Blood Orange',\n        options: {\n          a: 'Is a Hybrid Offering',\n          b: 'Is an Indica',\n          c: 'Is a Sativa',\n          d: 'All the above'\n        },\n        answer: 'c'\n      },\n      {\n        question: '2. Saturday Blood Orange is priced perfectly for which on-the-go shopper?',\n        options: {\n          a: 'Price Sensitive',\n          b: 'High End',\n          c: 'Mainstream',\n          d: 'All the above'\n        },\n        answer: 'a'\n      },\n      {\n        question: \"3. When speaking about the 1G Blood Orange product, I'd start with:\",\n        options: {\n          a: 'The Brand',\n          b: 'The Value',\n          c: 'The Potency',\n          d: 'The Flavour'\n        },\n        answer: 'd'\n      },\n      {\n        question: \"4. Orange flavour can be difficult to nail, but Saturday's Blood Orange has done so beautifully because:\",\n        options: {\n          a: \"It's crafted with terpenes and other aromatic compounds native to both oranges and cannabis\",\n          b: \"It's all limonene, which is the only citrus aromatic you need\",\n          c: \"We hired the Keebler elves.\",\n          d: 'All the above'\n        },\n        answer: 'b'\n      },\n      {\n        question: '5. I’d Recommend Saturday Blood Orange to a shopper in a situation where:',\n        options: {\n          a: 'An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.',\n          b: 'A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.',\n          c: 'An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank',\n          d: 'An occasional smoker who is looking for edibles.'\n        },\n        answer: 'c'\n      }\n    ]\n    const history = useHistory()\n    var set_forth_div = ['false']\n\n    useEffect(() => {\n        randList()\n    }, [])\n\n    const randList = () => {\n        gsap.to('.green_bg', {backgroundColor: '#535938', duration: 0})\n\n        if (completed.length >= questionaire_limit) {\n\n            if(points < 4){\n                localStorage.setItem('points', points)\n                history.push('/points')\n                // window.location.reload()\n            }\n            else{\n                localStorage.setItem('points', points)\n                history.push('/data-capture')\n            }\n\n        } else {\n            // Math.round(Math.random() * 4)\n            let random = counter++\n            const check_completed = completed.find(element => element == random)\n\n            // For some reason zero is being ignored. That why it's in the conditional statement below.\n            if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else {\n                completed.push(random)\n                question.current.textContent = list_of_questions[random].question\n\n                bg.current.style.background = `url(${QuizOrangeBg})`\n                bg.current.style.backgroundSize = 'cover'\n                a.current.textContent = list_of_questions[random].options.a\n                b.current.textContent = list_of_questions[random].options.b\n                c.current.textContent = list_of_questions[random].options.c\n                d.current.textContent = list_of_questions[random].options.d\n            }\n        }\n    }\n\n    const selected_answer = (selected_data) => {\n        gsap.to(`.${selected_data}`, {backgroundColor: '#40473F', duration: 0.5})\n        let index = completed[completed.length -1]\n        let answer = list_of_questions[index].answer\n\n        if(selected_data === answer) {\n          answer.current.textContent = 'Correct'; points++;  console.log(`updated points: ${points}`)\n        } else {\n          eval(selected_data).current.textContent = 'Incorrect';\n        }\n        setTimeout(()=>{\n            randList()\n        }, 1000)\n    }\n\n    return (\n        <div className={'Prizing'} ref={bg}>\n            <div id='quiz_holder'>\n                <div id='title_holder'>\n                    <h3 ref={question}></h3>\n                </div>\n                <div id='answer_list'>\n                    <div className='green_bg a' onClick={() => selected_answer('a')}><p className='ans' ref={a}></p></div>\n                    <div className='green_bg b' onClick={() => selected_answer('b')}><p className='ans' ref={b}></p></div>\n                    <div className='green_bg c' onClick={() => selected_answer('c')}><p className='ans' ref={c}></p></div>\n                    <div className={set_forth_div == 'true'?'displayNone':'green_bg d'} onClick={() => selected_answer('d')}><p className='ans' ref={d}></p></div>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Quiz\n"]},"metadata":{},"sourceType":"module"}