{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\n/**\n* @author\n* @function Quiz\n**/\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  var dict = {\n    a: '',\n    b: '',\n    c: '',\n    d: ''\n  };\n  const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?'];\n  const history = useHistory();\n  var completed = [];\n\n  const randList = () => {\n    let random = Math.round(Math.random() * 4);\n    var newList = list_of_questions;\n    const check_completed = completed.find(element => element == random);\n    console.log(check_completed);\n\n    if (completed.length >= newList.length) {\n      console.log('redirect to new page');\n    } else if (check_completed || check_completed === 0) {\n      randList();\n    } else {\n      completed.push(random);\n      console.log(completed);\n\n      _switch(random);\n    }\n  };\n\n  const _switch = n => {\n    switch (n) {\n      case 0:\n        dict.a = 'yes';\n        dict.b = 'no';\n        dict.c = 'maybe';\n        dict.d = 'idk';\n        console.log('switch 0');\n        break;\n\n      case 1:\n        dict.a = 'Good';\n        dict.b = 'not so good';\n        dict.c = 'bad';\n        dict.d = 'terrible';\n        console.log('switch 1');\n        break;\n\n      case 2:\n        dict.a = 'school';\n        dict.b = 'park';\n        dict.c = 'playground';\n        dict.d = 'beach';\n        console.log('switch 2');\n        break;\n\n      case 3:\n        dict.a = 'okay';\n        dict.b = 'alive';\n        dict.c = 'struggling';\n        dict.d = 'sad';\n        console.log('switch 3');\n        break;\n\n      case 4:\n        dict.a = 'vet';\n        dict.b = 'driver';\n        dict.c = 'cleaner';\n        dict.d = 'hacker';\n        console.log('switch 4');\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Prizing\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randList,\n      children: \"Select item from list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: dict.a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: dict.b\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: dict.c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: dict.d\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quiz;\nexport default Quiz; // \n// \n// console.log(newList[n])\n// completed.push(random)\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useState","useHistory","Quiz","props","dict","a","b","c","d","list_of_questions","history","completed","randList","random","Math","round","newList","check_completed","find","element","console","log","length","push","_switch","n","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\nvar dict = {\n     a: '',\n     b: '',\n     c: '',\n     d: ''\n}\n    \n    const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?']\n    const history = useHistory()\n    var completed = []\n\n    const randList = () => {\n        let random = Math.round(Math.random() * 4)\n        var newList = list_of_questions\n        const check_completed = completed.find(element => element == random)\n        \n        console.log(check_completed)\n\n        if (completed.length >= newList.length) {\n            console.log('redirect to new page')\n        } else if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else{\n                completed.push(random)\n                console.log(completed)\n                _switch(random)\n            }\n    \n    }\n\n    const _switch = (n) =>{\n        switch (n) {\n            case 0:\n                dict.a = 'yes';\n                dict.b = 'no';\n                dict.c = 'maybe'; \n                dict.d = 'idk';\n                console.log('switch 0')\n                break;\n            case 1:\n                dict.a = 'Good';\n                dict.b = 'not so good';\n                dict.c = 'bad'; \n                dict.d = 'terrible';\n                console.log('switch 1')\n                break;\n            case 2:\n                dict.a = 'school';\n                dict.b = 'park';\n                dict.c = 'playground'; \n                dict.d = 'beach';\n                console.log('switch 2')\n                break;\n            case 3:\n                dict.a = 'okay';\n                dict.b = 'alive';\n                dict.c = 'struggling'; \n                dict.d = 'sad';\n                console.log('switch 3')\n                break;\n            case 4:\n                dict.a = 'vet';\n                dict.b = 'driver';\n                dict.c = 'cleaner'; \n                dict.d = 'hacker';\n                console.log('switch 4')\n                break;\n            default:\n                break;\n\n        }\n    }\n\n\n\n\n\n\n\n    return (\n        <div id='Prizing'>\n            <button onClick={randList}>Select item from list</button>\n            <h1 style={{color: 'white'}}>{dict.a}</h1>\n            <h1 style={{color: 'white'}}>{dict.b}</h1>\n            <h1 style={{color: 'white'}}>{dict.c}</h1>\n            <h1 style={{color: 'white'}}>{dict.d}</h1>\n            \n        </div>\n    )\n\n}\n\nexport default Quiz\n\n// \n// \n\n\n// console.log(newList[n])\n// completed.push(random)"]},"metadata":{},"sourceType":"module"}