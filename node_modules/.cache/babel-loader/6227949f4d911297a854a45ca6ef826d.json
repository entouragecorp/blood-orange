{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\n/**\n* @author\n* @function Quiz\n**/\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  const [ans, setAns] = useState({\n    a: '',\n    b: '',\n    c: '',\n    d: ''\n  });\n  const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'coming?', 'here?']; // const history = useHistory()\n\n  var completed = [];\n\n  const randList = () => {\n    let random = Math.round(Math.random() * 4);\n    var newList = list_of_questions;\n    const check_completed = completed.find(element => element === random);\n    console.log(check_completed);\n\n    if (completed.length >= newList.length) {\n      console.log('redirect to new page');\n    } else {\n      if (check_completed || check_completed === 0) {\n        randList();\n      } else {\n        completed.push(random);\n\n        switch (random) {\n          case 0:\n            setAns({\n              a: 'Good',\n              b: 'not so good',\n              c: 'bad',\n              d: 'terrible'\n            });\n            break;\n\n          case 1:\n            setAns({\n              a: 'yes',\n              b: 'no',\n              c: 'maybe',\n              d: 'idk'\n            });\n            break;\n\n          case 2:\n            console.log('switch 2');\n            break;\n\n          case 3:\n            console.log('switch 3');\n            break;\n\n          case 4:\n            console.log('switch 4');\n            break;\n        } //  console.log(random)\n        //  console.log(completed)\n        //  console.log(`completed: ${completed}`)\n\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Prizing\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randList,\n      children: \"Select item from list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.b\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.d\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"sBEXX2L8+w2qyZiN25SaN3Tb8+0=\");\n\n_c = Quiz;\nexport default Quiz; // console.log(newList[n])\n// completed.push(random)\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useState","useHistory","Quiz","props","ans","setAns","a","b","c","d","list_of_questions","completed","randList","random","Math","round","newList","check_completed","find","element","console","log","length","push","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\n    const [ans, setAns] = useState({\n        a: '',\n        b: '',\n        c: '',\n        d: ''\n    })\n    const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'coming?', 'here?']\n    // const history = useHistory()\n    var completed = []\n\n    const randList = () => {\n        let random = Math.round(Math.random() * 4)\n        var newList = list_of_questions\n\n        const check_completed = completed.find(element => element === random)\n        console.log(check_completed)\n        if (completed.length >= newList.length) {\n            console.log('redirect to new page')\n        } else {\n            if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else {\n                completed.push(random)\n                switch (random) {\n                    case 0:\n                        setAns({ a: 'Good', b: 'not so good', c: 'bad', d:'terrible'})\n                        break;\n                    case 1:\n                        setAns({ a: 'yes', b: 'no', c: 'maybe', d:'idk'})\n                        break;\n                    case 2:\n                        console.log('switch 2')\n                        break;\n                    case 3:\n                        console.log('switch 3')\n                        break;\n                    case 4:\n                        console.log('switch 4')\n                        break;\n\n                }\n                //  console.log(random)\n                //  console.log(completed)\n                //  console.log(`completed: ${completed}`)\n            }\n        }\n\n\n\n\n\n    }\n\n    return (\n        <div id='Prizing'>\n            <button onClick={randList}>Select item from list</button>\n            <h1 style={{color: 'white'}}>{ans.a}</h1>\n            <h1 style={{color: 'white'}}>{ans.b}</h1>\n            <h1 style={{color: 'white'}}>{ans.c}</h1>\n            <h1 style={{color: 'white'}}>{ans.d}</h1>\n            \n        </div>\n    )\n\n}\n\nexport default Quiz\n\n\n// console.log(newList[n])\n// completed.push(random)"]},"metadata":{},"sourceType":"module"}