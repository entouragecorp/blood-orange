{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Documents/Applications/saturday/src/Pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { gsap } from 'gsap';\nimport { useHistory } from 'react-router';\nimport QuizOrangeBg from './../Assets/orange-vape-bg.png';\nimport QuizGreenBg from './../Assets/green-quiz-bg.png';\n/**\n* @author\n* @function Quiz\n**/\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  var completed = [];\n  var points = 0;\n  var counter = 0;\n  var bg_counter = 0;\n  const question = useRef();\n  const a = useRef();\n  const b = useRef();\n  const c = useRef();\n  const d = useRef();\n  const bg = useRef();\n  const questionaire_limit = 5;\n  const list_of_questions = ['1. Saturday 1G Blood Orange', '2. Saturday Blood Orange is priced perfectly for which on-the-go shopper?', \"3. When speaking about the 1G Blood Orange product, Id start with:\", \"4. Orange flavour can be difficult to nail, but Saturday's Blood Orange has done so beautifully because:\", '5. I’d Recommend Saturday Blood Orange to a shopper in a situation where:'];\n  const history = useHistory();\n  var set_forth_div = ['false'];\n  useEffect(() => {\n    randList();\n  }, []);\n\n  const randList = () => {\n    gsap.to('.green_bg', {\n      backgroundColor: '#535938',\n      duration: 0\n    });\n    var newList = list_of_questions;\n\n    if (completed.length >= questionaire_limit) {\n      if (points < 4) {\n        localStorage.setItem('points', points);\n        history.push('/points'); // window.location.reload()\n      } else {\n        localStorage.setItem('points', points);\n        history.push('/data-capture');\n      }\n    } else {\n      // Math.round(Math.random() * 4)\n      let random = counter++;\n      const check_completed = completed.find(element => element == random); // For some reason zero is being ignored. That why it's in the conditional statement below. \n\n      if (check_completed || check_completed === 0) {\n        randList();\n      } else {\n        completed.push(random);\n        question.current.textContent = list_of_questions[random];\n        console.log(completed);\n\n        switch (random) {\n          case 0:\n            bg.current.style.background = `url(${QuizOrangeBg})`;\n            bg.current.style.backgroundSize = 'cover';\n            a.current.textContent = 'Is a Hybrid Offering';\n            b.current.textContent = 'Is an Indica';\n            c.current.textContent = 'Is a Sativa';\n            d.current.textContent = 'All the above';\n            break;\n\n          case 1:\n            bg.current.style.background = `url(${QuizGreenBg})`;\n            bg.current.style.backgroundSize = 'cover';\n            a.current.textContent = 'Price Sensitive';\n            b.current.textContent = 'High End';\n            c.current.textContent = 'Mainstream';\n            d.current.textContent = 'All the above';\n            break;\n\n          case 2:\n            bg.current.style.background = `url(${QuizOrangeBg})`;\n            bg.current.style.backgroundSize = 'cover';\n            a.current.textContent = 'The Brand';\n            b.current.textContent = 'The Value';\n            c.current.textContent = 'The Potency';\n            d.current.textContent = 'The Flavour';\n            break;\n\n          case 3:\n            bg.current.style.background = `url(${QuizGreenBg})`;\n            bg.current.style.backgroundSize = 'cover';\n            a.current.textContent = \"It's crafted with terpenes and other aromatic compounds native to both oranges and cannabis\";\n            b.current.textContent = \"It's all limonene, which is the only citrus aromatic you need\";\n            c.current.textContent = \"We hired the Keebler elves.\";\n            d.current.textContent = 'All the above';\n            break;\n\n          case 4:\n            bg.current.style.background = `url(${QuizOrangeBg})`;\n            bg.current.style.backgroundSize = 'cover';\n            a.current.textContent = 'An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.';\n            b.current.textContent = 'A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.';\n            c.current.textContent = 'An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank';\n            d.current.textContent = 'An occasional smoker who is looking for edibles.';\n            break;\n        }\n      }\n    }\n  };\n\n  const selectved_answer = selected_data => {\n    gsap.to(`.${selected_data}`, {\n      backgroundColor: '#40473F',\n      duration: 0.5\n    });\n\n    switch (completed[completed.length - 1]) {\n      case 0:\n        if (selected_data == 'c') {\n          c.current.textContent = 'Correct';\n          points++;\n          console.log(`updated points: ${points}`);\n        } else {\n          eval(selected_data).current.textContent = 'Incorrect';\n        }\n\n        break;\n\n      case 1:\n        if (selected_data == 'a') {\n          a.current.textContent = 'Correct';\n          points++;\n          console.log(`updated points: ${points}`);\n        } else {\n          eval(selected_data).current.textContent = 'Incorrect';\n        }\n\n        break;\n\n      case 2:\n        if (selected_data == 'd') {\n          d.current.textContent = 'Correct';\n          points++;\n          console.log(`updated points: ${points}`);\n        } else {\n          eval(selected_data).current.textContent = 'Incorrect';\n        }\n\n        break;\n\n      case 3:\n        if (selected_data == 'b') {\n          b.current.textContent = 'Correct';\n          points++;\n          console.log(`updated points: ${points}`);\n        } else {\n          eval(selected_data).current.textContent = 'Incorrect';\n        }\n\n        break;\n\n      case 4:\n        if (selected_data == 'c') {\n          c.current.textContent = 'Correct';\n          points++;\n          console.log(`updated points: ${points}`);\n        } else {\n          eval(selected_data).current.textContent = 'Incorrect';\n        }\n\n        break;\n    }\n\n    setTimeout(() => {\n      randList();\n    }, 1000);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: 'Prizing',\n    ref: bg,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz_holder\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"title_holder\",\n        children: /*#__PURE__*/_jsxDEV(\"h3\", {\n          ref: question\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"answer_list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"green_bg a\",\n          onClick: () => selectved_answer('a'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: a\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 87\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"green_bg b\",\n          onClick: () => selectved_answer('b'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: b\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 87\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"green_bg c\",\n          onClick: () => selectved_answer('c'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: c\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 180,\n            columnNumber: 87\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: set_forth_div == 'true' ? 'displayNone' : 'green_bg d',\n          onClick: () => selectved_answer('d'),\n          children: /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"ans\",\n            ref: d\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 127\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 172,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"KvaWXTNKmbBSOVibstziA6MdziI=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quiz;\nexport default Quiz;\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useEffect","useRef","useState","gsap","useHistory","QuizOrangeBg","QuizGreenBg","Quiz","props","completed","points","counter","bg_counter","question","a","b","c","d","bg","questionaire_limit","list_of_questions","history","set_forth_div","randList","to","backgroundColor","duration","newList","length","localStorage","setItem","push","random","check_completed","find","element","current","textContent","console","log","style","background","backgroundSize","selectved_answer","selected_data","eval","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { gsap } from 'gsap'\nimport { useHistory } from 'react-router'\nimport QuizOrangeBg from './../Assets/orange-vape-bg.png'\nimport QuizGreenBg from './../Assets/green-quiz-bg.png'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\n    var completed = []\n    var points = 0\n    var counter = 0\n    var bg_counter = 0\n    const question = useRef()\n    const a = useRef()\n    const b = useRef()\n    const c = useRef()\n    const d = useRef()\n    const bg = useRef()\n    const questionaire_limit = 5\n    const list_of_questions = ['1. Saturday 1G Blood Orange', '2. Saturday Blood Orange is priced perfectly for which on-the-go shopper?', \"3. When speaking about the 1G Blood Orange product, Id start with:\", \"4. Orange flavour can be difficult to nail, but Saturday's Blood Orange has done so beautifully because:\", '5. I’d Recommend Saturday Blood Orange to a shopper in a situation where:']\n    const history = useHistory()\n    var set_forth_div = ['false']\n    \n\n\n    useEffect(() => {\n        randList()\n    }, [])\n\n\n\n\n\n\n\n\n    const randList = () => {\n        gsap.to('.green_bg', {backgroundColor: '#535938', duration: 0})\n        var newList = list_of_questions\n\n        if (completed.length >= questionaire_limit) {\n           \n            if(points < 4){ \n                localStorage.setItem('points', points)\n                history.push('/points')\n                // window.location.reload()\n            }\n            else{ \n                localStorage.setItem('points', points)\n                history.push('/data-capture')\n            }\n           \n        } else {\n            // Math.round(Math.random() * 4)\n            let random = counter++\n            const check_completed = completed.find(element => element == random)\n\n            // For some reason zero is being ignored. That why it's in the conditional statement below. \n            if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else {\n                completed.push(random)\n                question.current.textContent = list_of_questions[random]\n                console.log(completed)\n                switch (random) {\n                    case 0:\n                        bg.current.style.background = `url(${QuizOrangeBg})`\n                        bg.current.style.backgroundSize = 'cover'\n                        a.current.textContent = 'Is a Hybrid Offering'\n                        b.current.textContent = 'Is an Indica'\n                        c.current.textContent = 'Is a Sativa'\n                        d.current.textContent = 'All the above'\n                       \n                        break;\n                    case 1:\n                        bg.current.style.background = `url(${QuizGreenBg})`\n                        bg.current.style.backgroundSize = 'cover'\n                        a.current.textContent = 'Price Sensitive'\n                        b.current.textContent = 'High End'\n                        c.current.textContent = 'Mainstream'\n                        d.current.textContent = 'All the above'\n                       \n                        break;\n                    case 2:\n                        bg.current.style.background = `url(${QuizOrangeBg})`\n                        bg.current.style.backgroundSize = 'cover'\n                        a.current.textContent = 'The Brand'\n                        b.current.textContent = 'The Value'\n                        c.current.textContent = 'The Potency'\n                        d.current.textContent = 'The Flavour'\n                       \n                        break;\n                    case 3:\n                        bg.current.style.background = `url(${QuizGreenBg})`\n                        bg.current.style.backgroundSize = 'cover'\n                        a.current.textContent = \"It's crafted with terpenes and other aromatic compounds native to both oranges and cannabis\"\n                        b.current.textContent = \"It's all limonene, which is the only citrus aromatic you need\"\n                        c.current.textContent = \"We hired the Keebler elves.\"\n                        d.current.textContent = 'All the above'\n                       \n                        break;\n                    case 4:\n                        bg.current.style.background = `url(${QuizOrangeBg})`\n                        bg.current.style.backgroundSize = 'cover'\n                        a.current.textContent = 'An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.'\n                        b.current.textContent = 'A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.'\n                        c.current.textContent = 'An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank'\n                        d.current.textContent = 'An occasional smoker who is looking for edibles.'\n                       \n                        break;\n                }\n            }\n        }\n    }\n\n\n \n\n    const selectved_answer = (selected_data) => { \n    \n\n        gsap.to(`.${selected_data}`, {backgroundColor: '#40473F', duration: 0.5})\n        switch(completed[completed.length -1]){\n            case 0: \n            if(selected_data == 'c'){ c.current.textContent = 'Correct'; points++;  console.log(`updated points: ${points}`)}\n            else{  eval(selected_data).current.textContent = 'Incorrect'; }\n            break;\n\n            case 1:\n                if(selected_data == 'a'){ a.current.textContent = 'Correct'; points++;  console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect';}\n\n                break;\n            case 2:\n                if(selected_data == 'd'){ d.current.textContent = 'Correct'; points++;  console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect'}\n\n                break;\n            case 3:\n                if(selected_data == 'b'){ b.current.textContent = 'Correct'; points++;  console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect'}\n\n                break;\n            case 4:\n                if(selected_data == 'c'){ c.current.textContent = 'Correct'; points++;  console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect'}\n                break;\n        }\n\n\n    setTimeout(()=>{\n        randList()\n    }, 1000)\n        \n \n    }\n    \n\n    return (\n        <div className={'Prizing'} ref={bg}>\n            <div id='quiz_holder'>\n                <div id='title_holder'>\n                    <h3 ref={question}></h3>\n                </div>\n                <div id='answer_list'>\n                    <div className='green_bg a' onClick={() => selectved_answer('a')}><p className='ans' ref={a}></p></div>\n                    <div className='green_bg b' onClick={() => selectved_answer('b')}><p className='ans' ref={b}></p></div>\n                    <div className='green_bg c' onClick={() => selectved_answer('c')}><p className='ans' ref={c}></p></div>\n                    <div className={set_forth_div == 'true'?'displayNone':'green_bg d'} onClick={() => selectved_answer('d')}><p className='ans' ref={d}></p></div>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Quiz\n"]},"metadata":{},"sourceType":"module"}