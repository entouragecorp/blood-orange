{"ast":null,"code":"import React,{useEffect,useRef,useState}from'react';import{gsap}from'gsap';import{useHistory}from'react-router';/**\n* @author\n* @function Quiz\n**/ // We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Quiz=function Quiz(props){var completed=[];var points=0;var change_bg_counter=0;var question=useRef();var a=useRef();var b=useRef();var c=useRef();var d=useRef();var questionaire_limit=5;var list_of_questions=['Saturday 1G Blood Orange','Saturday Blood Orange is priced perfectly for which on-the-go shopper?',\"When speaking about the 1G Blood Orange product, Id start with:\",\"Orange flavour can be difficult to nail, but Saturday's Blood Orange has done so beautifully because:\",'5. I’d Recommend Saturday 7G Sweet & Sour Ready To Roll to a shopper in a situation where:'];var history=useHistory();var set_forth_div=['false'];useEffect(function(){randList();},[]);var randList=function randList(){gsap.to('.green_bg',{backgroundColor:'#535938',duration:0});var newList=list_of_questions;if(completed.length>=questionaire_limit){if(points<4){localStorage.setItem('points',points);history.push('/points');// window.location.reload()\n}else{history.push('/data-capture');}// if(points < 4){ \n// setTimeout(()=>{\n// history.push('/quiz')\n// }, 500)\n//     history.push('/quiz')\n// }\n// else if(points >= 4){ \n//     setTimeout(()=>{\n//         history.push('/')\n//         }, 500)\n// }\n// localStorage.setItem('points', points)\n// setTimeout(()=>{\n//     history.push('/')\n// }, 500)\n}else{var random=Math.round(Math.random()*4);var check_completed=completed.find(function(element){return element==random;});// For some reason zero is being ignored. That why it's in the conditional statement below. \nif(check_completed||check_completed===0){randList();}else{completed.push(random);question.current.textContent=list_of_questions[random];console.log(completed);switch(random){case 0:a.current.textContent='Is a Hybriid Offering';b.current.textContent='Is an Indica';c.current.textContent='Is a Sativa';d.current.textContent='All the above';break;case 1:a.current.textContent='Price Sensitive';b.current.textContent='High End';c.current.textContent='Mainstream';d.current.textContent='All the above';break;case 2:a.current.textContent='The Brand';b.current.textContent='The Value';c.current.textContent='The Potency';d.current.textContent='The Flavour';break;case 3:a.current.textContent=\"It's crafted with terpenes and other aromatic compounds native to both oranges and cannabis\";b.current.textContent=\"It's all limonene, which is the only citrus aromatic you need\";c.current.textContent=\"We hired the Keebler elves.\";d.current.textContent='All the above';break;case 4:a.current.textContent='An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.';b.current.textContent='A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.';c.current.textContent='An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank';d.current.textContent='An occasional smoker who is looking for edibles.';break;}}}};var selectved_answer=function selectved_answer(selected_data){gsap.to(\".\".concat(selected_data),{backgroundColor:'#40473F',duration:0.5});switch(completed[completed.length-1]){case 0:if(selected_data==='c'){c.current.textContent='Correct';points++;change_bg_counter++;console.log(\"updated points: \".concat(points));}else{change_bg_counter++;eval(selected_data).current.textContent='Correct';}break;case 1:if(selected_data==='a'){a.current.textContent='Correct';points++;change_bg_counter++;console.log(\"updated points: \".concat(points));}else{change_bg_counter++;eval(selected_data).current.textContent='Incorrect';}break;case 2:if(selected_data==='d'){d.current.textContent='Correct';points++;change_bg_counter++;console.log(\"updated points: \".concat(points));}else{change_bg_counter++;eval(selected_data).current.textContent='Incorrect';}break;case 3:if(selected_data==='b'){b.current.textContent='Correct';points++;change_bg_counter++;console.log(\"updated points: \".concat(points));}else{change_bg_counter++;eval(selected_data).current.textContent='Incorrect';}break;case 4:if(selected_data==='c'){c.current.textContent='Correct';points++;change_bg_counter++;console.log(\"updated points: \".concat(points));}else{change_bg_counter++;eval(selected_data).current.textContent='Incorrect';}break;}setTimeout(function(){randList();},1000);};return/*#__PURE__*/_jsx(\"div\",{className:'Prizing',children:/*#__PURE__*/_jsxs(\"div\",{id:\"quiz_holder\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"title_holder\",children:/*#__PURE__*/_jsx(\"h2\",{ref:question})}),/*#__PURE__*/_jsxs(\"div\",{id:\"answer_list\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"green_bg a\",onClick:function onClick(){return selectved_answer('a');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:a})}),/*#__PURE__*/_jsx(\"div\",{className:\"green_bg b\",onClick:function onClick(){return selectved_answer('b');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:b})}),/*#__PURE__*/_jsx(\"div\",{className:\"green_bg c\",onClick:function onClick(){return selectved_answer('c');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:c})}),/*#__PURE__*/_jsx(\"div\",{className:set_forth_div=='true'?'displayNone':'green_bg d',onClick:function onClick(){return selectved_answer('d');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:d})})]})]})});};export default Quiz;","map":{"version":3,"sources":["/Users/bottlecapmedia/Documents/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useEffect","useRef","useState","gsap","useHistory","Quiz","props","completed","points","change_bg_counter","question","a","b","c","d","questionaire_limit","list_of_questions","history","set_forth_div","randList","to","backgroundColor","duration","newList","length","localStorage","setItem","push","random","Math","round","check_completed","find","element","current","textContent","console","log","selectved_answer","selected_data","eval","setTimeout"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\nimport { gsap } from 'gsap'\nimport { useHistory } from 'react-router'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\n    var completed = []\n    var points = 0\n    var change_bg_counter = 0\n    const question = useRef()\n    const a = useRef()\n    const b = useRef()\n    const c = useRef()\n    const d = useRef()\n    const questionaire_limit = 5\n    const list_of_questions = ['Saturday 1G Blood Orange', 'Saturday Blood Orange is priced perfectly for which on-the-go shopper?', \"When speaking about the 1G Blood Orange product, Id start with:\", \"Orange flavour can be difficult to nail, but Saturday's Blood Orange has done so beautifully because:\", '5. I’d Recommend Saturday 7G Sweet & Sour Ready To Roll to a shopper in a situation where:']\n    const history = useHistory()\n    var set_forth_div = ['false']\n    \n\n\n    useEffect(() => {\n        randList()\n    }, [])\n\n\n\n\n\n\n\n\n    const randList = () => {\n        gsap.to('.green_bg', {backgroundColor: '#535938', duration: 0})\n        var newList = list_of_questions\n\n        if (completed.length >= questionaire_limit) {\n           \n            if(points < 4){ \n                localStorage.setItem('points', points)\n                history.push('/points')\n                // window.location.reload()\n            }\n            else{ \n               \n                history.push('/data-capture')\n            }\n            // if(points < 4){ \n            // setTimeout(()=>{\n            // history.push('/quiz')\n            // }, 500)\n            //     history.push('/quiz')\n            // }\n            // else if(points >= 4){ \n            //     setTimeout(()=>{\n            //         history.push('/')\n            //         }, 500)\n            // }\n            // localStorage.setItem('points', points)\n            // setTimeout(()=>{\n            //     history.push('/')\n            // }, 500)\n\n           \n        } else {\n\n            let random = Math.round(Math.random() * 4)\n            const check_completed = completed.find(element => element == random)\n\n            // For some reason zero is being ignored. That why it's in the conditional statement below. \n            if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else {\n                completed.push(random)\n                question.current.textContent = list_of_questions[random]\n                console.log(completed)\n                switch (random) {\n                    case 0:\n                        a.current.textContent = 'Is a Hybriid Offering'\n                        b.current.textContent = 'Is an Indica'\n                        c.current.textContent = 'Is a Sativa'\n                        d.current.textContent = 'All the above'\n                       \n                        break;\n                    case 1:\n                        a.current.textContent = 'Price Sensitive'\n                        b.current.textContent = 'High End'\n                        c.current.textContent = 'Mainstream'\n                        d.current.textContent = 'All the above'\n                       \n                        break;\n                    case 2:\n                        a.current.textContent = 'The Brand'\n                        b.current.textContent = 'The Value'\n                        c.current.textContent = 'The Potency'\n                        d.current.textContent = 'The Flavour'\n                       \n                        break;\n                    case 3:\n                        a.current.textContent = \"It's crafted with terpenes and other aromatic compounds native to both oranges and cannabis\"\n                        b.current.textContent = \"It's all limonene, which is the only citrus aromatic you need\"\n                        c.current.textContent = \"We hired the Keebler elves.\"\n                        d.current.textContent = 'All the above'\n                       \n                        break;\n                    case 4:\n                        a.current.textContent = 'An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.'\n                        b.current.textContent = 'A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.'\n                        c.current.textContent = 'An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank'\n                        d.current.textContent = 'An occasional smoker who is looking for edibles.'\n                       \n                        break;\n                }\n            }\n        }\n    }\n\n\n \n\n    const selectved_answer = (selected_data) => { \n    \n    gsap.to(`.${selected_data}`, {backgroundColor: '#40473F', duration: 0.5})\n\n    \n        switch(completed[completed.length -1]){\n            case 0: \n            if(selected_data === 'c'){ c.current.textContent = 'Correct'; points++; change_bg_counter++; console.log(`updated points: ${points}`)}\n            else{ change_bg_counter++; eval(selected_data).current.textContent = 'Correct'; }\n            break;\n\n            case 1:\n                if(selected_data === 'a'){ a.current.textContent = 'Correct'; points++; change_bg_counter++; console.log(`updated points: ${points}`)}\n                else{change_bg_counter++; eval(selected_data).current.textContent = 'Incorrect';}\n\n                break;\n            case 2:\n                if(selected_data === 'd'){ d.current.textContent = 'Correct'; points++; change_bg_counter++; console.log(`updated points: ${points}`)}\n                else{ change_bg_counter++;eval(selected_data).current.textContent = 'Incorrect'}\n\n                break;\n            case 3:\n                if(selected_data === 'b'){ b.current.textContent = 'Correct'; points++; change_bg_counter++; console.log(`updated points: ${points}`)}\n                else{change_bg_counter++; eval(selected_data).current.textContent = 'Incorrect'}\n\n                break;\n            case 4:\n                if(selected_data === 'c'){ c.current.textContent = 'Correct'; points++; change_bg_counter++; console.log(`updated points: ${points}`)}\n                else{change_bg_counter++; eval(selected_data).current.textContent = 'Incorrect'}\n                break;\n        }\n\n\n    setTimeout(()=>{\n        randList()\n    }, 1000)\n        \n \n    }\n    \n\n    return (\n        <div className={'Prizing'}>\n            <div id='quiz_holder'>\n                <div id='title_holder'>\n                    <h2 ref={question}></h2>\n                </div>\n                <div id='answer_list'>\n                    <div className='green_bg a' onClick={() => selectved_answer('a')}><p className='ans' ref={a}></p></div>\n                    <div className='green_bg b' onClick={() => selectved_answer('b')}><p className='ans' ref={b}></p></div>\n                    <div className='green_bg c' onClick={() => selectved_answer('c')}><p className='ans' ref={c}></p></div>\n                    <div className={set_forth_div == 'true'?'displayNone':'green_bg d'} onClick={() => selectved_answer('d')}><p className='ans' ref={d}></p></div>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Quiz"]},"metadata":{},"sourceType":"module"}