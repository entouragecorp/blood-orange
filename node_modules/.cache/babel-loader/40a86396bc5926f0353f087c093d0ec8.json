{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\n/**\n* @author\n* @function Quiz\n**/\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?'];\n  const [check, setCheck] = useState({\n    a: '',\n    b: '',\n    c: '',\n    complete: []\n  });\n  const history = useHistory();\n  var completed = [];\n\n  const randList = () => {\n    let random = Math.round(Math.random() * 4);\n    var newList = list_of_questions;\n    const check_completed = completed.find(element => element == random);\n    console.log(check_completed);\n\n    if (completed.length >= newList.length) {\n      console.log('redirect to new page');\n    } else if (check_completed || check_completed === 0) {\n      randList();\n    } else {\n      completed.push(random);\n      console.log(completed);\n\n      if (random === 0) {\n        setCheck({\n          a: 'se',\n          b: 'sdsd',\n          c: 'sdww',\n          complete: completed\n        });\n      }\n    }\n  }; // const _switch = (n) =>{\n  //     switch (n) {\n  //         case 0: \n  //         return <h1>zero</h1>\n  //         case 1: return <h1>one</h1>;\n  //         case 2: return <h1>two</h1>;\n  //         case 3: return <h1>three</h1>;\n  //         case 4: return <h1>four</h1>;\n  //         // default:\n  //         //     return <h1>empty</h1>\n  //     }\n  // }\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Prizing\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randList,\n      children: \"Select item from list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: check.a\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: check.b\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: check.c\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 1\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"m7CcRmuuNvqYfgFBbTIKf6euN5I=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quiz;\nexport default Quiz; // \n// \n// console.log(newList[n])\n// completed.push(random)\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useState","useHistory","Quiz","props","list_of_questions","check","setCheck","a","b","c","complete","history","completed","randList","random","Math","round","newList","check_completed","find","element","console","log","length","push"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,UAAT,QAA2B,cAA3B;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;AAEA,MAAMC,IAAI,GAAIC,KAAD,IAAW;AAAA;;AAGpB,QAAMC,iBAAiB,GAAG,CAAC,cAAD,EAAiB,eAAjB,EAAkC,gBAAlC,EAAoD,WAApD,EAAiE,iBAAjE,CAA1B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC;AAC/BO,IAAAA,CAAC,EAAC,EAD6B;AAE/BC,IAAAA,CAAC,EAAE,EAF4B;AAG/BC,IAAAA,CAAC,EAAE,EAH4B;AAI/BC,IAAAA,QAAQ,EAAE;AAJqB,GAAD,CAAlC;AAMA,QAAMC,OAAO,GAAGV,UAAU,EAA1B;AACA,MAAIW,SAAS,GAAG,EAAhB;;AAGA,QAAMC,QAAQ,GAAG,MAAM;AACnB,QAAIC,MAAM,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACD,MAAL,KAAgB,CAA3B,CAAb;AACA,QAAIG,OAAO,GAAGb,iBAAd;AACA,UAAMc,eAAe,GAAGN,SAAS,CAACO,IAAV,CAAeC,OAAO,IAAIA,OAAO,IAAIN,MAArC,CAAxB;AAEAO,IAAAA,OAAO,CAACC,GAAR,CAAYJ,eAAZ;;AACA,QAAIN,SAAS,CAACW,MAAV,IAAoBN,OAAO,CAACM,MAAhC,EAAwC;AACpCF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACH,KAFD,MAEO,IAAIJ,eAAe,IAAIA,eAAe,KAAK,CAA3C,EAA8C;AAC7CL,MAAAA,QAAQ;AACX,KAFE,MAGC;AACAD,MAAAA,SAAS,CAACY,IAAV,CAAeV,MAAf;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYV,SAAZ;;AACA,UAAGE,MAAM,KAAK,CAAd,EAAgB;AACZR,QAAAA,QAAQ,CAAC;AACLC,UAAAA,CAAC,EAAE,IADE;AAELC,UAAAA,CAAC,EAAC,MAFG;AAGLC,UAAAA,CAAC,EAAC,MAHG;AAILC,UAAAA,QAAQ,EAAEE;AAJL,SAAD,CAAR;AAMH;AAEJ;AAER,GAzBD,CAdoB,CAyCpB;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;AAQA,sBACI;AAAK,IAAA,EAAE,EAAC,SAAR;AAAA,4BACI;AAAQ,MAAA,OAAO,EAAEC,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEE;AAAA,8BAEV;AAAA,kBAAKR,KAAK,CAACE;AAAX;AAAA;AAAA;AAAA;AAAA,cAFU,eAGV;AAAA,kBAAKF,KAAK,CAACG;AAAX;AAAA;AAAA;AAAA;AAAA,cAHU,eAIV;AAAA,kBAAKH,KAAK,CAACI;AAAX;AAAA;AAAA;AAAA;AAAA,cAJU;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAcH,CA9ED;;GAAMP,I;UAUcD,U;;;KAVdC,I;AAgFN,eAAeA,IAAf,C,CAEA;AACA;AAGA;AACA","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\n\n    \n    const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?']\n    const [check, setCheck] = useState({\n        a:'',\n        b: '',\n        c: '',\n        complete: []\n    })\n    const history = useHistory()\n    var completed = []\n   \n\n    const randList = () => {\n        let random = Math.round(Math.random() * 4)\n        var newList = list_of_questions\n        const check_completed = completed.find(element => element == random)\n        \n        console.log(check_completed)\n        if (completed.length >= newList.length) {\n            console.log('redirect to new page')\n        } else if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else{\n                completed.push(random)\n                console.log(completed)\n                if(random === 0){\n                    setCheck({\n                        a: 'se',\n                        b:'sdsd',\n                        c:'sdww',\n                        complete: completed\n                    })\n                }\n                \n            }\n    \n    }\n\n    // const _switch = (n) =>{\n  \n    //     switch (n) {\n    //         case 0: \n    //         return <h1>zero</h1>\n                \n    //         case 1: return <h1>one</h1>;\n    //         case 2: return <h1>two</h1>;\n    //         case 3: return <h1>three</h1>;\n    //         case 4: return <h1>four</h1>;\n            \n    //         // default:\n    //         //     return <h1>empty</h1>\n\n    //     }\n    // }\n\n\n\n\n\n\n\n    return (\n        <div id='Prizing'>\n            <button onClick={randList}>Select item from list</button>\n          <div>\n\n<h1>{check.a}</h1>\n<h1>{check.b}</h1>\n<h1>{check.c}</h1>\n\n          </div>\n            \n        </div>\n    )\n\n}\n\nexport default Quiz\n\n// \n// \n\n\n// console.log(newList[n])\n// completed.push(random)"]},"metadata":{},"sourceType":"module"}