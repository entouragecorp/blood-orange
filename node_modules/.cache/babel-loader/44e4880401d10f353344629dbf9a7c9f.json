{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\n/**\n* @author\n* @function Quiz\n**/\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  const newData = (a, b, c, d) => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        children: a\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        children: b\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        children: c\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          color: 'white'\n        },\n        children: d\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true);\n  };\n\n  const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?'];\n  const history = useHistory();\n  var completed = [];\n\n  const randList = () => {\n    let random = Math.round(Math.random() * 4);\n    var newList = list_of_questions;\n    const check_completed = completed.find(element => element == random);\n    console.log(check_completed);\n\n    if (completed.length >= newList.length) {\n      console.log('redirect to new page');\n    } else if (check_completed || check_completed === 0) {\n      randList();\n    } else {\n      completed.push(random);\n      console.log(completed);\n\n      _switch(random);\n    }\n  };\n\n  const _switch = n => {\n    switch (n) {\n      case 0:\n        console.log('switch 0');\n        break;\n\n      case 1:\n        console.log('switch 1');\n        break;\n\n      case 2:\n        console.log('switch 2');\n        break;\n\n      case 3:\n        console.log('switch 3');\n        break;\n\n      case 4:\n        console.log('switch 4');\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Prizing\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randList,\n      children: \"Select item from list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: newData()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"9cZfZ04734qoCGIctmKX7+sX6eU=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quiz;\nexport default Quiz; // \n// \n// console.log(newList[n])\n// completed.push(random)\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useState","useHistory","Quiz","props","newData","a","b","c","d","color","list_of_questions","history","completed","randList","random","Math","round","newList","check_completed","find","element","console","log","length","push","_switch","n"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\nconst newData = (a, b, c, d) =>{\nreturn(\n<>\n            <h1 style={{color: 'white'}}>{a}</h1>\n            <h1 style={{color: 'white'}}>{b}</h1>\n            <h1 style={{color: 'white'}}>{c}</h1>\n            <h1 style={{color: 'white'}}>{d}</h1>\n</>\n)\n}\n    \n    const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?']\n    const history = useHistory()\n    var completed = []\n\n    const randList = () => {\n        let random = Math.round(Math.random() * 4)\n        var newList = list_of_questions\n        const check_completed = completed.find(element => element == random)\n        \n        console.log(check_completed)\n\n        if (completed.length >= newList.length) {\n            console.log('redirect to new page')\n        } else if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else{\n                completed.push(random)\n                console.log(completed)\n                _switch(random)\n            }\n    \n    }\n\n    const _switch = (n) =>{\n        switch (n) {\n            case 0:\n  \n                console.log('switch 0')\n                break;\n            case 1:\n            \n                console.log('switch 1')\n                break;\n            case 2:\n         \n                console.log('switch 2')\n                break;\n            case 3:\n            \n                console.log('switch 3')\n                break;\n            case 4:\n           \n                console.log('switch 4')\n                break;\n            default:\n                break;\n\n        }\n    }\n\n\n\n\n\n\n\n    return (\n        <div id='Prizing'>\n            <button onClick={randList}>Select item from list</button>\n          <div>{newData()}</div>\n            \n        </div>\n    )\n\n}\n\nexport default Quiz\n\n// \n// \n\n\n// console.log(newList[n])\n// completed.push(random)"]},"metadata":{},"sourceType":"module"}