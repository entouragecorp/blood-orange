{"ast":null,"code":"var _jsxFileName = \"/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { useHistory } from 'react-router';\n/**\n* @author\n* @function Quiz\n**/\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Quiz = props => {\n  _s();\n\n  const [ans, setAns] = useState({\n    a: '',\n    b: '',\n    c: '',\n    d: ''\n  });\n  const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?'];\n  const history = useHistory();\n  var completed = [];\n\n  const randList = () => {\n    let random = Math.round(Math.random() * 4);\n    var newList = list_of_questions;\n    const check_completed = completed.find(element => element == random);\n    console.log(check_completed);\n\n    if (completed.length >= newList.length) {\n      console.log('redirect to new page');\n    } else if (check_completed || check_completed === 0) {\n      randList();\n    } else {\n      completed.push(random);\n\n      switch (random) {\n        case 0:\n          setAns({\n            a: 'yes',\n            b: 'no',\n            c: 'maybe',\n            d: 'idk'\n          });\n          console.log('switch 0');\n          break;\n\n        case 1:\n          setAns({\n            a: 'Good',\n            b: 'not so good',\n            c: 'bad',\n            d: 'terrible'\n          });\n          console.log('switch 1');\n          break;\n\n        case 2:\n          setAns({\n            a: 'school',\n            b: 'park',\n            c: 'playground',\n            d: 'beach'\n          });\n          console.log('switch 2');\n          break;\n\n        case 3:\n          setAns({\n            a: 'okay',\n            b: 'alive',\n            c: 'struggling',\n            d: 'sad'\n          });\n          console.log('switch 3');\n          break;\n\n        case 4:\n          setAns({\n            a: 'vet',\n            b: 'driver',\n            c: 'cleaner',\n            d: 'hacker'\n          });\n          console.log('switch 4');\n          break;\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"Prizing\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: randList,\n      children: \"Select item from list\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.a\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.b\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.c\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: ans.d\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Quiz, \"9RYme1RTUMGBZTHYT2g8ule9A80=\", false, function () {\n  return [useHistory];\n});\n\n_c = Quiz;\nexport default Quiz; // \n// \n// console.log(newList[n])\n// completed.push(random)\n\nvar _c;\n\n$RefreshReg$(_c, \"Quiz\");","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useState","useHistory","Quiz","props","ans","setAns","a","b","c","d","list_of_questions","history","completed","randList","random","Math","round","newList","check_completed","find","element","console","log","length","push","color"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport { useHistory } from 'react-router'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\n    const [ans, setAns] = useState({\n        a: '',\n        b: '',\n        c: '',\n        d: ''\n    })\n    const list_of_questions = ['how are you?', 'are you okay?', 'where is john?', 'hows mom?', 'what do you do?']\n    const history = useHistory()\n    var completed = []\n\n    const randList = () => {\n        let random = Math.round(Math.random() * 4)\n        var newList = list_of_questions\n        const check_completed = completed.find(element => element == random)\n        \n        console.log(check_completed)\n\n        if (completed.length >= newList.length) {\n            console.log('redirect to new page')\n        } else if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else{\n                completed.push(random)\n                switch (random) {\n                    case 0:\n                        setAns({ a: 'yes', b: 'no', c: 'maybe', d:'idk'})\n                        console.log('switch 0')\n                        break;\n                    case 1:\n                        setAns({ a: 'Good', b: 'not so good', c: 'bad', d:'terrible'})\n                        console.log('switch 1')\n                        break;\n                    case 2:\n                        setAns({ a: 'school', b: 'park', c: 'playground', d:'beach'})\n                        console.log('switch 2')\n                        break;\n                    case 3:\n                        setAns({ a: 'okay', b: 'alive', c: 'struggling', d:'sad'})\n                        console.log('switch 3')\n                        break;\n                    case 4:\n                        setAns({ a: 'vet', b: 'driver', c: 'cleaner', d:'hacker'})\n                        console.log('switch 4')\n                        break;\n\n                }\n             \n            }\n        \n\n\n\n\n\n    }\n\n    return (\n        <div id='Prizing'>\n            <button onClick={randList}>Select item from list</button>\n            <h1 style={{color: 'white'}}>{ans.a}</h1>\n            <h1 style={{color: 'white'}}>{ans.b}</h1>\n            <h1 style={{color: 'white'}}>{ans.c}</h1>\n            <h1 style={{color: 'white'}}>{ans.d}</h1>\n            \n        </div>\n    )\n\n}\n\nexport default Quiz\n\n// \n// \n\n\n// console.log(newList[n])\n// completed.push(random)"]},"metadata":{},"sourceType":"module"}