{"ast":null,"code":"import React,{useEffect,useRef}from'react';import{gsap}from'gsap';import{useHistory}from'react-router';/**\n* @author\n* @function Quiz\n**/ // We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Quiz=function Quiz(props){var completed=[];var points=0;var question=useRef();var a=useRef();var b=useRef();var c=useRef();var d=useRef();var questionaire_limit=5;var list_of_questions=['Saturday 7G Sweet & Sour Ready-to-Roll:','Saturday 7G Sweet & Sour Ready-to-Roll is coming in what THC%?',\"When speaking about the 1G Blood Orange roduct, Id start with:\",\"I’d Recommend Saturday Blood Orange to a shopper in a situation where\",'5. I’d Recommend Saturday 7G Sweet & Sour Ready To Roll to a shopper in a situation where:'];var history=useHistory();useEffect(function(){randList();},[]);var randList=function randList(){gsap.to('.green_bg',{backgroundColor:'#535938',duration:0});var newList=list_of_questions;if(completed.length>=questionaire_limit){localStorage.setItem('points',points);setTimeout(function(){history.push('/');},500);}else{var random=Math.round(Math.random()*4);var check_completed=completed.find(function(element){return element==random;});// For some reason zero is being ignored. That why it's in the conditional statement below. \nif(check_completed||check_completed===0){randList();}else{completed.push(random);question.current.textContent=list_of_questions[random];console.log(completed);switch(random){case 0:a.current.textContent='Is a Sativa Offering';b.current.textContent='Is an Indica Offering';c.current.textContent='Is a Hybrid Offering';d.current.textContent='';break;case 1:a.current.textContent='11%-15%';b.current.textContent='16%-20%';c.current.textContent='20%+';d.current.textContent='';break;case 2:a.current.textContent='The Flavour';b.current.textContent='The Value';c.current.textContent='The Brand';d.current.textContent='The Convenience of 510 Carts';break;case 3:a.current.textContent='An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.';b.current.textContent='A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.';c.current.textContent='An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank';d.current.textContent='An occasional smoker who is looking for edibles.';break;case 4:a.current.textContent='An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.';b.current.textContent='A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.';c.current.textContent='An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank';d.current.textContent='An occasional smoker who is looking for edibles.';break;}}}};var selectved_answer=function selectved_answer(selected_data){gsap.to(\".\".concat(selected_data),{backgroundColor:'black',duration:0.5});console.log(\"selected data: \".concat(selected_data,\" Last_item in completed list: \").concat(completed[completed.length-1],\")\"));switch(completed[completed.length-1]){case 0:if(selected_data==='a'){a.current.textContent='Correct';points++;console.log(\"updated points: \".concat(points));}else{eval(selected_data).current.textContent='Correct';}break;case 1:if(selected_data==='b'){b.current.textContent='Correct';points++;console.log(\"updated points: \".concat(points));}else{eval(selected_data).current.textContent='Incorrect';}break;case 2:if(selected_data==='c'){c.current.textContent='Correct';points++;console.log(\"updated points: \".concat(points));}else{eval(selected_data).current.textContent='Incorrect';}break;case 3:if(selected_data==='d'){d.current.textContent='Correct';points++;console.log(\"updated points: \".concat(points));}else{eval(selected_data).current.textContent='Incorrect';}break;case 4:if(selected_data==='c'){c.current.textContent='Correct';points++;console.log(\"updated points: \".concat(points));}else{eval(selected_data).current.textContent='Incorrect';}break;}setTimeout(function(){randList();},1500);};return/*#__PURE__*/_jsx(\"div\",{className:\"Prizing\",children:/*#__PURE__*/_jsxs(\"div\",{id:\"quiz_holder\",children:[/*#__PURE__*/_jsx(\"div\",{id:\"title_holder\",children:/*#__PURE__*/_jsx(\"h2\",{ref:question})}),/*#__PURE__*/_jsxs(\"div\",{id:\"answer_list\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"green_bg a\",onClick:function onClick(){return selectved_answer('a');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:a})}),/*#__PURE__*/_jsx(\"div\",{className:\"green_bg b\",onClick:function onClick(){return selectved_answer('b');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:b})}),/*#__PURE__*/_jsx(\"div\",{className:\"green_bg c\",onClick:function onClick(){return selectved_answer('c');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:c})}),/*#__PURE__*/_jsx(\"div\",{className:\"green_bg d\",onClick:function onClick(){return selectved_answer('d');},children:/*#__PURE__*/_jsx(\"p\",{className:\"ans\",ref:d})})]})]})});};export default Quiz;","map":{"version":3,"sources":["/Users/bottlecapmedia/Desktop/Applications/saturday/src/Pages/Quiz.js"],"names":["React","useEffect","useRef","gsap","useHistory","Quiz","props","completed","points","question","a","b","c","d","questionaire_limit","list_of_questions","history","randList","to","backgroundColor","duration","newList","length","localStorage","setItem","setTimeout","push","random","Math","round","check_completed","find","element","current","textContent","console","log","selectved_answer","selected_data","eval"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react'\nimport { gsap } from 'gsap'\nimport { useHistory } from 'react-router'\n\n/**\n* @author\n* @function Quiz\n**/\n\n// We are going to have a list of questions\n// from this list we're going to randomly select an index\n// this index will be stored in memory and deleted from the other array\n// we then run an conditional statement to determine what are the answers\n// we then concatinate when the answer is correct or do nothing if it is not. \n// we're nor going to call and random search function on the old array for another question. \n\nconst Quiz = (props) => {\n    var completed = []\n    var points = 0\n    const question = useRef()\n    const a = useRef()\n    const b = useRef()\n    const c = useRef()\n    const d = useRef()\n    const questionaire_limit = 5\n    const list_of_questions = ['Saturday 7G Sweet & Sour Ready-to-Roll:', 'Saturday 7G Sweet & Sour Ready-to-Roll is coming in what THC%?', \"When speaking about the 1G Blood Orange roduct, Id start with:\", \"I’d Recommend Saturday Blood Orange to a shopper in a situation where\", '5. I’d Recommend Saturday 7G Sweet & Sour Ready To Roll to a shopper in a situation where:']\n    const history = useHistory()\n\n\n\n    useEffect(() => {\n        randList()\n    }, [])\n    \n    const randList = () => {\n        gsap.to('.green_bg', {backgroundColor: '#535938', duration: 0})\n        var newList = list_of_questions\n\n        if (completed.length >= questionaire_limit) {\n            localStorage.setItem('points', points)\n            setTimeout(()=>{\n                history.push('/')\n            }, 500)\n           \n        } else {\n\n            let random = Math.round(Math.random() * 4)\n            const check_completed = completed.find(element => element == random)\n\n            // For some reason zero is being ignored. That why it's in the conditional statement below. \n            if (check_completed || check_completed === 0) {\n                randList()\n            }\n            else {\n                completed.push(random)\n                question.current.textContent = list_of_questions[random]\n                console.log(completed)\n                switch (random) {\n                    case 0:\n                        a.current.textContent = 'Is a Sativa Offering'\n                        b.current.textContent = 'Is an Indica Offering'\n                        c.current.textContent = 'Is a Hybrid Offering'\n                        d.current.textContent = ''\n\n                        break;\n                    case 1:\n                        a.current.textContent = '11%-15%'\n                        b.current.textContent = '16%-20%'\n                        c.current.textContent = '20%+'\n                        d.current.textContent = ''\n\n                        break;\n                    case 2:\n                        a.current.textContent = 'The Flavour'\n                        b.current.textContent = 'The Value'\n                        c.current.textContent = 'The Brand'\n                        d.current.textContent = 'The Convenience of 510 Carts'\n\n                        break;\n                    case 3:\n                        a.current.textContent = 'An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.'\n                        b.current.textContent = 'A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.'\n                        c.current.textContent = 'An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank'\n                        d.current.textContent = 'An occasional smoker who is looking for edibles.'\n\n                        break;\n                    case 4:\n                        a.current.textContent = 'An experienced or occasional cannabis shopper who is seeking a smooth, high-THC joint-smoking experience and values the dollars in their pocket.'\n                        b.current.textContent = 'A shopper who is new to cannabis or is re-entering the category after many years, and is looking for a balanced offering.'\n                        c.current.textContent = 'An experienced or occasional smoker who is looking for a tasty, high-THC experience while they’re on-the-go that won’t break the bank'\n                        d.current.textContent = 'An occasional smoker who is looking for edibles.'\n                        break;\n                }\n            }\n        }\n    }\n\n    const selectved_answer = (selected_data) => { \n    gsap.to(`.${selected_data}`, {backgroundColor: 'black', duration: 0.5})\n    console.log(`selected data: ${selected_data} Last_item in completed list: ${completed[completed.length -1]})`)\n    \n        switch(completed[completed.length -1]){\n            case 0: \n            if(selected_data === 'a'){ a.current.textContent = 'Correct'; points++; console.log(`updated points: ${points}`)}\n            else{ eval(selected_data).current.textContent = 'Correct'}\n            break;\n\n            case 1:\n                if(selected_data === 'b'){ b.current.textContent = 'Correct'; points++; console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect'}\n\n                break;\n            case 2:\n                if(selected_data === 'c'){ c.current.textContent = 'Correct'; points++; console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect'}\n\n                break;\n            case 3:\n                if(selected_data === 'd'){ d.current.textContent = 'Correct'; points++; console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect'}\n\n                break;\n            case 4:\n                if(selected_data === 'c'){ c.current.textContent = 'Correct'; points++; console.log(`updated points: ${points}`)}\n                else{ eval(selected_data).current.textContent = 'Incorrect'}\n                break;\n        }\n\n\n    setTimeout(()=>{\n        randList()\n    }, 1500)\n        \n\n    }\n\n    return (\n        <div className='Prizing'>\n\n\n            <div id='quiz_holder'>\n                <div id='title_holder'>\n                    <h2 ref={question}></h2>\n                </div>\n                <div id='answer_list'>\n                    <div className='green_bg a' onClick={() => selectved_answer('a')}><p className='ans' ref={a}></p></div>\n                    <div className='green_bg b' onClick={() => selectved_answer('b')}><p className='ans' ref={b}></p></div>\n                    <div className='green_bg c' onClick={() => selectved_answer('c')}><p className='ans' ref={c}></p></div>\n                    <div className='green_bg d' onClick={() => selectved_answer('d')}><p className='ans' ref={d}></p></div>\n                </div>\n            </div>\n        </div>\n    )\n\n}\n\nexport default Quiz"]},"metadata":{},"sourceType":"module"}